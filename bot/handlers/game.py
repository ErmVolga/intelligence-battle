from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from bot.utils.db import create_connection
from bot.keyboards import game_kb
import logging
import asyncio
from bot.utils.logging_config import setup_logging
from typing import Optional

setup_logging()
router = Router()


class GameStates(StatesGroup):
    waiting_for_room_id = State()


async def is_user_in_room(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–Ω–∞—Ç–µ"""
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT 1 FROM active_players WHERE user_id = %s", (user_id,))
            return bool(cursor.fetchone())
        finally:
            connection.close()
    return False


async def add_player_to_room(user_id: int, room_id: int) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É"""
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute(
                "INSERT INTO active_players (user_id, room_id) VALUES (%s, %s) "
                "ON DUPLICATE KEY UPDATE room_id = VALUES(room_id)",
                (user_id, room_id)
            )
            connection.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞: {e}")
            return False
        finally:
            connection.close()
    return False


async def remove_player_from_room(user_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"""
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute("DELETE FROM active_players WHERE user_id = %s", (user_id,))
            connection.commit()
            return cursor.rowcount > 0
        finally:
            connection.close()
    return False


async def get_room_players_count(room_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ"""
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT COUNT(*) FROM active_players WHERE room_id = %s", (room_id,))
            result = cursor.fetchone()
            return result[0] if result else 0
        finally:
            connection.close()
    return 0


async def get_user_room_id(user_id: int) -> Optional[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT room_id FROM active_players WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            return int(result[0]) if result else None
        except (ValueError, TypeError):
            return None
        finally:
            connection.close()
    return None


async def create_room(user_id: int, is_private: bool) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"""
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT id FROM questions ORDER BY RAND() LIMIT 1")
            question_id = cursor.fetchone()[0]

            cursor.execute(
                "INSERT INTO rooms (player1_id, question_id, is_private) VALUES (%s, %s, %s)",
                (user_id, question_id, is_private)
            )
            connection.commit()
            return int(cursor.lastrowid)
        finally:
            connection.close()
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


async def find_or_create_public_room(user_id: int) -> int:
    """–ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é –∫–æ–º–Ω–∞—Ç—É"""
    connection = create_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute("""
                SELECT id FROM rooms 
                WHERE is_private = FALSE 
                AND (player2_id IS NULL OR player3_id IS NULL OR player4_id IS NULL)
                LIMIT 1
            """)
            room = cursor.fetchone()

            if room:
                return int(room[0])
            else:
                return await create_room(user_id, is_private=False)
        finally:
            connection.close()
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


async def update_room_status_periodically(message: Message, room_id: int, stop_event: asyncio.Event):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã"""
    last_count = 0

    while not stop_event.is_set():
        try:
            current_count = await get_room_players_count(room_id)

            if current_count != last_count:
                await message.edit_reply_markup(
                    reply_markup=game_kb.get_room_status_keyboard(room_id, current_count)
                )
                last_count = current_count

                if current_count >= 2:
                    await message.edit_text("üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!")
                    stop_event.set()
                    return

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

        await asyncio.sleep(1)


@router.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def start_game_handler(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'"""
    try:
        if await is_user_in_room(msg.from_user.id):
            await msg.answer("‚ö†Ô∏è –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ. –í—ã–π–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return

        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:", reply_markup=game_kb.game_type_keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_game_handler: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.in_(["play_with_friends", "play_random"]))
async def game_type_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–≥—Ä—ã"""
    try:
        user_id = callback.from_user.id

        if await is_user_in_room(user_id):
            await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ!", show_alert=True)
            return

        stop_event = asyncio.Event()
        room_id = None
        msg = None

        try:
            if callback.data == "play_with_friends":
                room_id = await create_room(user_id, is_private=True)
                if not await add_player_to_room(user_id, room_id):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É")

                msg = await callback.message.answer(
                    f"üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞: {room_id}\n"
                    "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏–º —ç—Ç–æ—Ç ID",
                    reply_markup=game_kb.get_room_status_keyboard(room_id, 1)
                )

            elif callback.data == "play_random":
                room_id = await find_or_create_public_room(user_id)
                if not await add_player_to_room(user_id, room_id):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É")

                msg = await callback.message.answer(
                    "üîé –ò—â–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤...",
                    reply_markup=game_kb.get_room_status_keyboard(room_id, 1)
                )

            if room_id and msg:
                try:
                    task = asyncio.create_task(update_room_status_periodically(msg, room_id, stop_event))
                    await state.update_data({
                        'room_id': room_id,
                        'stop_event': stop_event,
                        'status_message_id': msg.message_id,
                        'background_task': task
                    })
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    stop_event.set()
                    await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã")

            await callback.answer()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {e}")
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É")
            if stop_event:
                stop_event.set()
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ game_type_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("leave_room:"))
async def leave_room_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"""
    try:
        user_id = callback.from_user.id
        data = await state.get_data()

        if 'background_task' in data:
            data['stop_event'].set()
            data['background_task'].cancel()

        success = await remove_player_from_room(user_id)
        if success:
            await callback.message.edit_text(
                "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã",
                reply_markup=game_kb.back_to_main_keyboard
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã",
                reply_markup=game_kb.back_to_main_keyboard
            )

        await state.clear()
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ")


@router.callback_query(F.data == "refresh_room_status")
async def refresh_room_status_handler(callback: CallbackQuery):
    """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã"""
    try:
        user_id = callback.from_user.id
        room_id = await get_user_room_id(user_id)

        if room_id:
            players_count = await get_room_players_count(room_id)
            await callback.message.edit_reply_markup(
                reply_markup=game_kb.get_room_status_keyboard(room_id, players_count)
            )
            await callback.answer("‚ôªÔ∏è –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")


@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=game_kb.start_buttons
    )
    await callback.answer()


@router.callback_query(F.data == "join_room_by_id")
async def join_room_by_id_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∫–æ–º–Ω–∞—Ç—ã"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã:")
    await state.set_state(GameStates.waiting_for_room_id)
    await callback.answer()


@router.message(GameStates.waiting_for_room_id)
async def process_room_id(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ ID"""
    try:
        user_id = msg.from_user.id
        room_id = int(msg.text.strip())

        if await is_user_in_room(user_id):
            await msg.answer("‚ùå –í—ã —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ!")
            return

        connection = create_connection()
        if connection:
            cursor = connection.cursor()
            cursor.execute("SELECT id FROM rooms WHERE id = %s", (room_id,))
            if cursor.fetchone():
                await add_player_to_room(user_id, room_id)

                stop_event = asyncio.Event()
                msg = await msg.answer(
                    f"‚úÖ –í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}",
                    reply_markup=game_kb.get_room_status_keyboard(
                        room_id,
                        await get_room_players_count(room_id)
                    )
                )

                try:
                    task = asyncio.create_task(update_room_status_periodically(msg, room_id, stop_event))
                    await state.update_data({
                        'room_id': room_id,
                        'stop_event': stop_event,
                        'status_message_id': msg.message_id,
                        'background_task': task
                    })
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    stop_event.set()
            else:
                await msg.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            connection.close()
    except ValueError:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–æ–º–Ω–∞—Ç—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    finally:
        await state.clear()