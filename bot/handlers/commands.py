import logging
from aiogram import types, F, Router, html
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

from bot.keyboards import start_buttons
from bot.keyboards.game_kb import game_type_keyboard
from bot.utils.db import create_connection, insert_players
from bot.utils.logging_config import setup_logging

setup_logging()
load_dotenv()

router = Router()


async def get_welcome_message(msg: Message) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return (
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(html.quote(msg.from_user.full_name))}! üëã\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! üéâ\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.\n"
        "‚öîÔ∏è –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏.\n"
        "üèÜ –°—Ç–∞—Ç—å —á–µ–º–ø–∏–æ–Ω–æ–º –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –∏–≥—Ä–µ!\n\n"
        "–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
        "- –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Ç–∏—é.\n"
        "- –í—ã–±–µ—Ä–∏ '–ü—Ä–∞–≤–∏–ª–∞', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å.\n"
        "- –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏ '–ü–æ–º–æ—â—å'.\n\n"
        "–ì–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–ø–µ—Ä—ë–¥ –∫ –ø–æ–±–µ–¥–µ! üöÄ"
    )


@router.message(Command("start"))
async def start_handler(msg: Message):
    try:
        connection = create_connection()
        if connection:
            try:
                user_id = msg.from_user.id
                cursor = connection.cursor()
                cursor.execute("SELECT * FROM players WHERE id = %s", (user_id,))
                result = cursor.fetchone()

                if not result:
                    insert_players(connection, user_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
                await msg.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
            finally:
                cursor.close()
                connection.close()

        await msg.answer(
            await get_welcome_message(msg),
            reply_markup=start_buttons
        )
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await msg.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def my_stats_handler(msg: types.Message):
    user_id = msg.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    connection = create_connection()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

    if connection is not None:
        try:
            cursor = connection.cursor()

            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            query = """
                SELECT score, correct_answers, wrong_answers, wins
                FROM players
                WHERE id = %s;
            """
            cursor.execute(query, (user_id,))
            result = cursor.fetchone()

            if result:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                score, correct_answers, wrong_answers, wins = result
                total_answers = correct_answers + wrong_answers

                # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ª—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                if total_answers > 0:
                    accuracy = correct_answers / total_answers
                    accuracy_percentage = round(accuracy * 100, 2)  # –ü—Ä–æ—Ü–µ–Ω—Ç —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
                else:
                    accuracy_percentage = 0.0

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await msg.answer(
                    f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                    f"üèÜ –û—á–∫–∏: {score}\n"
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n"
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong_answers}\n"
                    f"üìà –î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {accuracy_percentage}%\n"
                    f"ü•á –ü–æ–±–µ–¥: {wins}"
                )

                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
                await msg.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã –µ—ë —Å–æ–∑–¥–∞—Ç—å!")
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            connection.close()
    else:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logging.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await msg.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def start_game(msg: types.Message):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=game_type_keyboard)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_game –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_handler(msg: Message):
    await msg.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=start_buttons
    )


'''
@router.message(F.text & ~F.text.startswith("/"))
async def message_handler(msg: Message):
    await msg.answer(f"–¢–≤–æ–π id: {msg.from_user.id}")
'''

